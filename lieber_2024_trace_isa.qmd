---
title: "Lieber 2024 TRACE ISA"
author: "Bob Policastro"
format: html
editor: visual
---

## Libraries

Load the required libraries for the analysis.

```{r}
library("tidyverse")
library("patchwork")
library("randomcoloR")
library("ggseqlogo")
library("Biostrings")
```

## Prepare Data

Load the annotated insertion sites from the Ensoma TRACE ISA workflow.

```{r}
isa_files <-
  file.path("data", "insertion_sites") |>
  list.files(pattern="\\.tsv$", full.names=TRUE)

isa <- isa_files |>
  tibble(file_path=_) |>
  mutate(
    file_name=basename(file_path),
    data=map(file_path, read_tsv, show_col_types=FALSE)
  ) |>
  unnest(data) |>
  # Remove the Illumina stuff from the sample names.
  mutate(file_id=str_remove(sample_id, "_S\\d+_L00\\d\\.\\S+$")) |>
  relocate(file_id, .after=sample_id)
```

Load the sample sheet that has additional info for each sample.
Then merge the information with the ISA results.

```{r}
sample_sheet <- read_csv(
  file.path("data", "sample_sheet.csv"), show_col_types=FALSE
)

isa <- left_join(isa, sample_sheet, by="file_id")
```

Only keep insertion sites that appear in at least 2 of 3 technical replicates.
Return the sum of UMIs for the group of technical replicates.

```{r}
isa <- isa |>
  group_by(sample_name, seqnames, start, end, strand) |>
  filter(n() > 1) |>
  ungroup() |>
  group_by(
    sample_name, seqnames, start, end, strand, annotation, tss_distance 
  ) |>
  summarize(score=sum(score), .groups="drop")
```

Set the factor levels of the sample names so they appear in a consistent order
in the plots.

```{r}
sample_name_order <- c(
  "Human K562 60.00%", "Mouse PBMC 65.10%", "Mouse PBMC 62.20%",
  "Mouse PBMC 38.90%", "Mouse PBMC 37.00%", "Mouse PBMC 25.00%",
  "Mouse PBMC 0.00%"
)

isa <- mutate(
  isa, sample_name=factor(sample_name, levels=sample_name_order)
)
```

## Number and Frequency of Insertion Sites

Generate a bar graph of the number of insertion sites per sample.

```{r}
#| fig.height: 3.5
#| fig.width: 4

p <- isa |>
  count(sample_name) |>
  ggplot(aes(x=n, y=fct_rev(sample_name))) +
    geom_col(width=0.75, aes(fill=sample_name), show.legend=FALSE) +
    theme_bw() +
    labs(
      x="Number of Unique Insertion\nSite Locations",
      y="Sample",
      title="Unique Insertion Site\nLocations per Sample"
    ) +
    scale_fill_brewer(palette="Set2")

print(p)

if (!dir.exists("results")) dir.create("results")

ggsave(
  file.path("results", "insertion_sites_per_sample.pdf"), plot=p,
  device=cairo_pdf, height=3.5, width=4
)
```

Bargraph of the number of genome fragments captured with an insertion site.

```{r}
#| fig.height: 3.5
#| fig.width: 4

p <- isa |>
  group_by(sample_name) |>
  summarize(score=sum(score), .groups="drop") |>
  ggplot(aes(x=score, y=fct_rev(sample_name))) +
    geom_col(width=0.75, aes(fill=sample_name), show.legend=FALSE) +
    theme_bw() +
    labs(
      x="Number of Sequenced\nInsertion Sites",
      y="Sample",
      title="Insertion Sites Sequenced\nper Sample"
    ) +
    scale_fill_brewer(palette="Set2")

print(p)

ggsave(
  file.path("results", "insertion_sites_sequenced_per_sample.pdf"), plot=p,
  device=cairo_pdf, height=3.5, width=4
)
```

Create a stacked bar plot of the fraction of insertion sites for each genomic
location in each sample. Colors correspond to a specific genomic location.

```{r}
#| fig.height: 4.5
#| fig.width: 5.5

# Function to generate random color palette.
random_pal <- function(vals) {
  n_vals <- length(unique(vals))
  color_map <- unique(randomcoloR::randomColor(n_vals + 1000))[1:n_vals]
  names(color_map) <- unique(vals)
  colors <- vapply(vals, \(x) color_map[x], character(1))
  return(colors)
}

# Prepare data for plotting.
df <- isa |>
  # Summarize the fraction of reads per insertion site.
  dplyr::group_by(sample_name) |>
  dplyr::mutate(frac=score / sum(score)) |>
  dplyr::ungroup() |>
  # Add a column with the custom colors.
  dplyr::mutate(
      posid=paste(seqnames, start, end, strand, sep=":"),
      color=random_pal(posid),
      sample_id=factor(
          sample_name,
          levels=rev(stringr::str_sort(unique(sample_name)))
      )
  ) |>
  split(~sample_name) |>
  lapply(\(x) {
      x <- x |>
          dplyr::mutate(
              color=forcats::fct_drop(color),
              color=forcats::fct_reorder(color, frac, .desc=TRUE)
          )
      return(x)
  })

# Create the plots.
p <- df |>
  imap(\(x, y) {
    ggplot(x, aes(x=frac, y=sample_name)) +
      geom_col(aes(fill=color)) +
      scale_fill_identity() +
      scale_x_continuous(labels=scales::percent) +
      theme_classic() +
      labs(
        x="Percentage of Captured\nInsertion Events",
        y="Sample"
      )
  }) |>
  wrap_plots(ncol=1) +
    plot_layout(axes="collect", axis_titles="collect")

print(p)

ggsave(
  file.path("results", "insertion_site_percentage_per_sample.pdf"),
  plot=p, device=cairo_pdf, height=4.5, width=5.5
)
```

## Genomic Distribution

Create a stacked barplot of the genomic annotation for the insertion sites
in each sample.

```{r}
#| fig.height: 4.5
#| fig.width: 5

annotation_factor_order <- c(
  "Promoter", "Exon", "Intron", "3' UTR", "Downstream", "Distal Intergenic"
)

p <- isa |>
  mutate(annotation=str_remove(annotation, "\\s\\(.+$")) |>
  count(sample_name, annotation) |>
  group_by(sample_name) |>
  mutate(frac=n/sum(n)) |>
  ungroup() |>
  complete(sample_name, annotation, fill=list(n=0)) |>
  mutate(annotation=factor(annotation, levels=annotation_factor_order)) |>
  ggplot(aes(x=frac, y=fct_rev(sample_name))) +
    geom_col(aes(fill=fct_rev(annotation))) +
    scale_fill_brewer(palette="Set1") +
    scale_x_continuous(labels=scales::percent) +
    theme_bw() +
    theme(
      legend.position="bottom"
    ) +
    guides(fill=guide_legend(ncol=2)) +
    labs(
      title="Genomic Distribution of\nInsertion Sites",
      x="Percentage of Insertion Site\nLocations",
      y="Sample",
      fill="Genomic\nAnnotation"
    )

print(p)

ggsave(
  file.path("results", "insertion_site_genomic_locations.pdf"),
  plot=p, device=cairo_pdf, height=4.5, width=5
)
```

Create a histogram for the distribution of insertion sites around transcription
start sites.

```{r}
#| fig.height: 6
#| fig.width: 6

p <- isa |>
  dplyr::filter(abs(tss_distance) < 500000) |>
  ggplot(aes(x=tss_distance)) +
    geom_histogram(
      bins=100,
      aes(
        y=after_stat(count)/sum(after_stat(count)), fill=sample_name
      ),
      show.legend=FALSE
    ) +
    theme_bw() +
    facet_wrap(
      vars(sample_name), ncol=1, scales="free_y",
      strip.position="right"
    ) +
    scale_x_continuous(
      labels=scales::label_number(suffix=" kbp",scale=1e-3)
    ) +
    scale_y_continuous(labels=scales::percent) +
    scale_fill_brewer(palette="Set2") +
    theme(
      strip.text.y.right=element_text(angle=0),
      strip.background=element_blank(),
      axis.text.y=element_text(size=6)
    ) +
    labs(
      x="Distance to Promoter",
      y="Percent of Insertion Sites",
      title="Distribution of Unique Insertion Site\nLocations Relative to Promoters"
    )

print(p)

ggsave(
  file.path("results", "insertion_sites_promoter_proximity.pdf"),
  plot=p, device=cairo_pdf, height=6, width=6
)
```

Seqlogos for the insertion sites.

```{r}
#| fig.height: 8
#| fig.width: 8

# Load the FASTA data into a table.
fasta_files <- 
  file.path("data", "insertion_site_sequences") |>
  list.files(pattern="\\.fasta$", full.names=TRUE) |>
  tibble(file_path=_) |>
  mutate(
    file_id=str_remove(basename(file_path), "_S\\d+_L00\\d\\.\\S+"),
    data=map(file_path, readDNAStringSet),
    posid=map(data, names),
    seq=map(data, \(x) {unname(as.character(x))})
  ) |>
  left_join(
    select(sample_sheet, file_id, sample_name),
    by="file_id"
  ) |>
  select(!c(data, file_path, file_id)) |>
  unnest(c(posid, seq)) |>
  distinct() |>
  separate_wider_regex(
    posid, c(
      seqnames="^\\S+", ":", start="\\d+", "-", end="\\d+", "\\(",
      strand="[\\+\\-]", "\\)"
    ),
    cols_remove=FALSE
  ) |>
  mutate(across(c(start, end), as.numeric))

# Remove insertion sites that appeared in less than 2 technical replicates.
fasta_files <- semi_join(
  fasta_files,
  mutate(isa, start=start - 21, end=end + 20),
  by=c("sample_name", "seqnames", "start", "end", "strand")
)

# Turn it into a named list for ggseqlogo.
fasta_files <- fasta_files |>
  split(~sample_name) |>
  map(pull, seq)

# Order the sequences.
fasta_files <- fasta_files[levels(isa$sample_name)]

# Create the sequence logos.
p <- ggseqlogo(fasta_files, ncol=1, seq_type="dna") +
  theme(
    text=element_text(size=7)
  ) +
  scale_x_continuous(breaks=seq_len(41), labels=seq(-20, 20, 1)) +
  labs(
    x="Position Relative to\nInsertion Site"
  )

print(p)

ggsave(
  file.path("results", "insertion_site_seqlogo.pdf"),
  plot=p, device=cairo_pdf, height=8, width=8
)
```

Karyotype plots R.

```{r}

```