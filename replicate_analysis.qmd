---
title: "Lieber 2024 TRACE ISA Replicate Analysis"
author: "Bob Policastro"
format: html
editor: visual
---

## Libraries

Load the required libraries for the analysis.

```{r}
library("tidyverse")
library("patchwork")
library("GGally")
```

## Prepare Data

Load the annotated insertion sites from the Ensoma TRACE ISA workflow.

```{r}
isa_files <-
  file.path("data", "insertion_sites") |>
  list.files(pattern="\\.tsv$", full.names=TRUE)

isa <- isa_files |>
  tibble(file_path=_) |>
  mutate(
    file_name=basename(file_path),
    data=map(file_path, read_tsv, show_col_types=FALSE)
  ) |>
  unnest(data) |>
  # Remove the Illumina stuff from the sample names.
  mutate(file_id=str_remove(sample_id, "_S\\d+_L00\\d\\.\\S+$")) |>
  relocate(file_id, .after=sample_id)
```

Load the sample sheet that has additional info for each sample.
Then merge the information with the ISA results.

```{r}
sample_sheet <- read_csv(
  file.path("data", "sample_sheet.csv"), show_col_types=FALSE
)

isa <- left_join(isa, sample_sheet, by="file_id")
```

Only keep insertion sites that appear in at least 2 of 3 technical replicates.
Return the sum of UMIs for the group of technical replicates.

```{r}
# isa <- isa |>
#   group_by(sample_name, seqnames, start, end, strand) |>
#   filter(n() > 1) |>
#   ungroup() |>
#   group_by(
#     sample_name, seqnames, start, end, strand, annotation, tss_distance 
#   ) |>
#   summarize(score=sum(score), .groups="drop")
```

Set the factor levels of the sample names so they appear in a consistent order
in the plots.

```{r}
# sample_name_order <- c(
#   "Human K562 60.00%", "Mouse PBMC 65.10%", "Mouse PBMC 62.20%",
#   "Mouse PBMC 38.90%", "Mouse PBMC 37.00%", "Mouse PBMC 25.00%",
#   "Mouse PBMC 0.00%"
# )
# 
# isa <- mutate(
#   isa, sample_name=factor(sample_name, levels=sample_name_order)
# )
```

## Replicate Correlation

Replicate correlation before filtering.

```{r}
p <- isa |>
  mutate(
    file_id=str_replace_all(file_id, "-", "_")
  ) |>
  select(sample_name, file_id, seqnames, start, end, strand, score) |>
  split(~sample_name) |>
  map(\(x) {
    x <- x |>
      pivot_wider(names_from=file_id, values_from=score, values_fill=0) |>
      select(!c(sample_name, seqnames, start, end, strand))
    return(x)
  }) |>
  imap(\(x, y) {
    ggpairs(
      x,
      lower=list(continuous=wrap("smooth_lm", color="darkgrey", size=0.25)),
      diag=list(continuous=wrap("barDiag", binwidth=1, fill="lightskyblue")),
      upper=list(continuous=wrap("cor", color="black", method="pearson"))
    ) +
      theme_bw() +
      labs(title=y)
  })

if (!dir.exists(file.path("results", "replicate_cor", "prefilter"))) {
  dir.create(
    file.path("results", "replicate_cor", "prefilter"),
    recursive=TRUE
  )
}

iwalk(p, \(x, y) {
  file_name <- y |>
    str_to_lower() |>
    str_replace_all(" ", "_") |>
    str_remove("%") |>
    str_glue("{filename}_prefilter_corplot.pdf", filename=_)
  
  ggsave(
    file.path("results", "replicate_cor", "prefilter", file_name),
    plot=x, device=cairo_pdf, height=4, width=5
  )
})
```

Replicate correlation after filtering.

```{r}
p <- isa |>
  group_by(sample_name, seqnames, start, end, strand) |>
  filter(n() > 1) |>
  ungroup() |>
  mutate(
    file_id=str_replace_all(file_id, "-", "_")
  ) |>
  select(sample_name, file_id, seqnames, start, end, strand, score) |>
  split(~sample_name) |>
  map(\(x) {
    x <- x |>
      pivot_wider(names_from=file_id, values_from=score, values_fill=0) |>
      select(!c(sample_name, seqnames, start, end, strand))
    return(x)
  }) |>
  imap(\(x, y) {
    ggpairs(
      x,
      lower=list(continuous=wrap("smooth_lm", color="darkgrey", size=0.25)),
      diag=list(continuous=wrap("barDiag", binwidth=1, fill="lightskyblue")),
      upper=list(continuous=wrap("cor", color="black", method="pearson"))
    ) +
      theme_bw() +
      labs(title=y)
  })

if (!dir.exists(file.path("results", "replicate_cor", "postfilter"))) {
  dir.create(
    file.path("results", "replicate_cor", "postfilter"),
    recursive=TRUE
  )
}

iwalk(p, \(x, y) {
  file_name <- y |>
    str_to_lower() |>
    str_replace_all(" ", "_") |>
    str_remove("%") |>
    str_glue("{filename}_postfilter_corplot.pdf", filename=_)
  
  ggsave(
    file.path("results", "replicate_cor", "postfilter", file_name),
    plot=x, device=cairo_pdf, height=4, width=5
  )
})
```

## Replicate Requirement

```{r}
#| fig.height: 8
#| fig.width: 5

# Get comparisons.
df <- isa |>
  split(~sample_name) |>
  imap(\(x, y) {
    single_combos <- tibble(
      sample_1=unique(x$file_id)
    )
    
    pairwise_combos <-
      combn(unique(x$file_id), 2) |>
      t() |>
      as_tibble() |>
      rename(sample_1=1, sample_2=2)
    
    all <-
      combn(unique(x$file_id), 1) |>
      as_tibble() |>
      rename(sample_1=1, sample_2=2, sample_3=3)
    
    combos <- 
      list(
        single=single_combos,
        two_of_two=pairwise_combos,
        two_of_three=all,
        three_of_three=all
      ) |>
      bind_rows(.id="comparison")
    
    return(combos)
  }) |>
  bind_rows(.id="sample_name")

# Get the total ISs in each comparison.
df <- mutate(
  df,
  n=pmap(
    list(sample_1, sample_2, sample_3, sample_name, comparison),
    \(s1, s2, s3, sample_name, comparison) {
      samples <- discard(c(s1, s2, s3), is.na)
      
      iss <- filter(isa, sample_name == sample_name, file_id %in% samples)

      if (comparison == "single") {
        n <- tibble(file_id=samples, n=nrow(iss))
      } else if (comparison == "two_of_two") {
        n <- iss |>
          group_by(seqnames, start, end, strand) |>
          filter(n() == 2) |>
          ungroup() |>
          distinct(seqnames, start, end, strand) |>
          mutate(file_id=str_c(samples, collapse="_")) |>
          count(file_id)
      } else if (comparison == "two_of_three") {
        n <- iss |>
          group_by(seqnames, start, end, strand) |>
          filter(n() > 1) |>
          ungroup() |>
          distinct(seqnames, start, end, strand) |>
          semi_join(x=iss, y=_, by=c("seqnames", "start", "end", "strand")) |>
          count(file_id)
      } else if (comparison == "three_of_three") {
        n <- iss |>
          group_by(seqnames, start, end, strand) |>
          filter(n() == 3) |>
          ungroup() |>
          distinct(seqnames, start, end, strand) |>
          mutate(file_id=str_c(samples, collapse="_")) |>
          count(file_id)
      }
      
      return(n)
    }
  )
)

# Plot
sample_name_order <- c(
  "Human K562 60.00%", "Mouse PBMC 65.10%", "Mouse PBMC 62.20%",
  "Mouse PBMC 38.90%", "Mouse PBMC 37.00%", "Mouse PBMC 25.00%",
  "Mouse PBMC 0.00%"
)

df |>
  unnest(n) |>
  dplyr::mutate(
    comparison=factor(
      comparison,
      levels=c("single", "two_of_two", "two_of_three", "three_of_three")
    ),
    sample_name=factor(sample_name, levels=sample_name_order)
  ) |>
  ggplot(aes(x=comparison, y=n)) +
    geom_jitter(width=0.15, aes(color=comparison), show.legend=FALSE) +
    facet_wrap(facets=vars(sample_name), ncol=1, scales="free_y") +
    ylim(0, NA) +
    theme_bw() +
    labs(x="Comparison", y="Number of Insertion Site Locations")
```